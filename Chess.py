# VS code's cody AI has been used to generate the comments in this file, No other
# aspects of the file have been generated by AI, Have fun!


class ChessPiece: # basse class for all chess pieces
    def __init__(self, color, name): 
        self.color = color
        self.name = name

    def __str__(self): # returns the first letter of the piece name
        return self.name[0].upper() if self.color == 'white' else self.name[0].lower()


class ChessBoard: # class for the chess board
    def __init__(self): 
        self.board = self.create_board()

    def create_board(self): # creates the board
        
        board = [[None] * 8 for _ in range(8)] # create an 8x8 board

        for i in range(8): 
            board[1][i] = ChessPiece('white', 'pawn') # place pawns
            board[6][i] = ChessPiece('black', 'pawn') # place pawns
        pieces = ['rook', 'knight', 'bishop', 'queen', 'king', 'bishop', 'knight', 'rook'] # place other pieces
        for i, piece in enumerate(pieces): # place pieces
            board[0][i] = ChessPiece('white', piece)
            board[7][i] = ChessPiece('black', piece)
        return board

    def display(self): # displays the board
        
        for row in self.board: # for each row in the board
            print(" | ".join(str(piece) if piece else '.' for piece in row)) # print each row
            print("-" * 33) # print the divider

    def move_piece(self, start, end): # moves the piece depending on the user input
        
        start_row, start_col = start # unpacking the start and end coordinates
        end_row, end_col = end # unpacking the start and end coordinates
        piece = self.board[start_row][start_col] # getting the piece
        if piece and self.is_valid_move(start, end): # checking if the move is valid
            self.board[end_row][end_col] = piece # moving the piece
            self.board[start_row][start_col] = None # removing the piece from the start position
            return True
        return False


    def is_valid_move(self, start, end): # checks if the move is valid
       
        start_row, start_col = start
        end_row, end_col = end
        piece = self.board[start_row][start_col]
        if not piece:
            return False
        return True  # Simplified: further rules should be implemented


def main(): # main function
    chess_board = ChessBoard()
    turn = 'white'


    while True: # game loop
        chess_board.display()
        print(f"{turn.capitalize()}'s turn")


        start = input("Enter the start position (e.g., 'e2'): ")
        end = input("Enter the end position (e.g., 'e4'): ")


        start_row = 8 - int(start[1]) # convert to 0-7 index
        start_col = ord(start[0]) - ord('a') # convert to 0-7 index
        end_row = 8 - int(end[1]) # convert to 0-7 index
        end_col = ord(end[0]) - ord('a') # convert to 0-7 index


        if chess_board.move_piece((start_row, start_col), (end_row, end_col)): # move the piece
            turn = 'black' if turn == 'white' else 'white' # switch turns
        else:
            print("Invalid move. Try again.")


if __name__ == "__main__":
    main() # calls the main functioOn
